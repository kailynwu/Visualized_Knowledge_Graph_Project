2025-07-08 12:44:37,806 - neo4j.pool - DEBUG - [#0000]  _: <POOL> created, direct address IPv4Address(('localhost', 7687))
2025-07-08 12:44:40,949 - __main__ - INFO - 程序启动，处理文件: ./AIGC讲稿v3.docx
2025-07-08 12:44:40,949 - __main__ - INFO - 开始读取 DOCX 文件: ./AIGC讲稿v3.docx
2025-07-08 12:44:40,970 - __main__ - INFO - 完成读取 DOCX 文件: ./AIGC讲稿v3.docx
2025-07-08 12:44:40,970 - __main__ - INFO - 开始调用豆包 API 提取实体和关系
2025-07-08 12:44:40,970 - __main__ - DEBUG - 请求 URL: https://ark.cn-beijing.volces.com/api/v3/chat/completions
2025-07-08 12:44:40,970 - __main__ - DEBUG - 请求头: {'Content-Type': 'application/json', 'Authorization': 'Bearer ca8407be-0151-48f1-bdc5-e9982c3a1bf7'}
2025-07-08 12:44:40,971 - __main__ - DEBUG - 请求体: {'model': 'doubao-seed-1.6-250615', 'messages': [{'role': 'system', 'content': 'You are a helpful assistant.'}, {'role': 'user', 'content': '请从以下文本中提取实体和它们之间的关系，以 JSON 格式输出，示例格式：{\'entities\': [\'实体1\', \'实体2\'], \'relations\': [(\'实体1\', \'关系类型\', \'实体2\')]}。文本：树莓派+ DeepSeek：工业视觉诊断实战\n—— 让设备自己“说”出维修秘籍\nhttps://www.coze.cn/s/OY8blohHbGw/\n一、情境导入：传统维护的困境（1.5 min）\n教师：\n同学们，我们已经完成了工业设备检测和维护人员体征监测的任务。\n今天进入任务三，工业智能维护助手。\n课前视频中，有这样一个细节：设备突发故障时，维修工程师花了23分钟翻找维护手册。\n（稍作停顿，眼神交流）\n这 23 分钟意味着什么呢？\n在汽车产线，每分钟损失 2000 元；在半导体工厂，这个数字是50万元。\nAI助教：\n（弹出钢厂事故简报：减速机故障→错误维修→29小时停机→百万损失）\n教师：\n维修手册调取延迟，可能引发连锁反应。\n二、痛点剖析：传统模式的致命伤（1.5 min）\n教师：\n出现这样的问题，核心在于传统维护模式的两大痛点：\n第一，纸质文档过多，紧急情况下难以快速定位；\n第二，设备资料分散，跨部门调取困难。\n如何让维修人员在最短时间内获取精准信息？\n让知识像 “扫码支付” 一样随需随到？\n这就是我们今天的目标——打造工业场景下"拍照即所得"的智能知识推送系统\n（播放工业维护视频25s）\n系统逻辑分三步：一拍、二查、三推送。\n课前任务中，大家已经实现了拍照识别与基础交互。\n根据企业专家的评分，请得分最高的第3组，来分享演示。（到这里2:30）\n学生：\n（演示）我们对现场拍照后，在交互界面输入问题，“图片里有什么”，系统给出了完整描述。\n三、技术解密：智能知识推送系统（5 分钟）\n教师：\n很好，谢谢XX同学的演示，我们已实现了“拍摄→提问→反馈”的雏形。\n但工业场景下，照片可能模糊、油污遮挡，如何做到“拍照即所得”？。\n教师：\n（举起设备套装）\n核心是为树莓派选择一个“最强大脑”——大语言模型。\n学生：\n什么是大语言模型？\n教师：\n大语言模型是AI的“语言中枢”。能“听懂”指令、“读懂”故障描述，并用自然语言给出解决方案。\n课前大家调研了主流大语言模型。\nAI助教：\n我汇总了大家的调研情况。\n根据普及程度，用来进行图像识别的主流大语言模型有GPT系统、DeepSeek、文心大模型、LLaMA和BERT这5种。\n教师：\n请大家在智能白板上匹配模型特点，为工业场景下的智能知识推送系统选择“最强大脑”。\n学生：\n（讨论，在线互动软件互动反馈，1min）\nhttps://boardmix.cn/app/editor/goFEVzfyhWj990CbPtUyZA\n（学生在线互动1分钟，AI助教汇总反馈）\nhttps://boardmix.cn/app/share/CAE.CKrJ4w8gASoQgoFEVzfyhWj990CbPtUyZDAFQAE/H3nWrb，点击链接加入boardmix中的文件「LLM」\n（选3位同学编辑）\n（分组反馈）\n\nAI助教：\n（弹出对比图表）\n根据树莓派的硬件参数，我做了性能模拟：\n✅ GPT需云端支持，违背边缘计算初衷\n✅ 文心/BERT中文强但工业术语覆盖不足\n✅ LLaMA开源但需至少8GB内存\n✅ DeepSeek经量化压缩后，可在树莓派实现本地推理！\n教师：\n（圈出关键指标）\nDeepSeek的多模态解析、抗模糊干扰、企业知识库兼容、亚秒级响应，正是工业巡检的核心需求！\n选择国产大语言模型，不仅是技术决策，更是对工业数据主权的守护。\n接下来，我们就通过树莓派+DeepSeek打造随身维修智库。\n四、系统搭建：三步构建“AI维修工”（5分钟）\n教师：\n具体分为三步：部署摄像头节点、DeepSeek节点和知识库节点，先取景，再思考，最后展示！\n（实验任务）\n我们在课前任务的基础上，部署调测DeepSeek节点，要求能识别模糊的设备照片。\n学生：\n（学生分组实验，教师巡回指导）\n学生：\n（陆续举手完成，实验部分2分钟）\n教师：\n（观察学生进度）\n很好，大家都已经完成，请将实验结果提交给AI助教判定识别准确率。\nAI助教：\n（弹出评分）\n教师：\n请识别准确率最高的第4组来分享演示。\n学生：\n（演示）调用DeepSeek分析模糊的设备照片，系统给出了准确描述。\n教师：\n谢谢XX同学的分享，大家在操作过程还有什么问题吗？\n学生：\n（提问）大语言模式是如何实现 "拍照识设备"的？\n教师：\n同学们这种不满足于表面应用、执着探究原理的钻研精神，正是科技创新最重要的品质之一。\n首先，AI用“图像编码器”把照片变成数字密码。\n然后，大语言模型对数字密码和问题，比如“这是什么设备？”进行混合思考。\n最后，AI就像写作文一样，一步步生成自然语言的描述。\n通过以上步骤，为AI装上"工业之眼"，用科技的力量助力维修效率的提高。\n五、辩论与实验：数字基因的传承\n维护手段，从"纸质秘籍"到"数字基因"，改变的是什么？？\nAI维修助手应完全替代纸质手册吗？还是关键设备仍需保留"纸质副本"？\n（举起老维修工手册与树莓派）\n真正的工业智慧，是让数字技术延续"传帮带"精神！\n教师：\n接下来，让我们继续完成实验，配置知识库节点，实现拍摄设备照片→推送维护手册的功能。'}]}
2025-07-08 12:44:40,972 - urllib3.connectionpool - DEBUG - Starting new HTTPS connection (1): ark.cn-beijing.volces.com:443
2025-07-08 12:45:49,819 - urllib3.connectionpool - DEBUG - https://ark.cn-beijing.volces.com:443 "POST /api/v3/chat/completions HTTP/1.1" 200 14191
2025-07-08 12:45:49,819 - __main__ - DEBUG - 响应状态码: 200
2025-07-08 12:45:49,819 - __main__ - DEBUG - 响应内容: {"choices":[{"finish_reason":"stop","index":0,"logprobs":null,"message":{"content":"{\"entities\": [\"树莓派\", \"DeepSeek\", \"工业视觉诊断\", \"大语言模型\", \"GPT系统\", \"文心大模型\", \"LLaMA\", \"BERT\", \"智能知识推送系统\", \"摄像头节点\", \"DeepSeek节点\", \"知识库节点\", \"图像编码器\", \"边缘计算\", \"工业数据主权\", \"维修手册\", \"设备故障\", \"国产大语言模型\", \"多模态解析\", \"抗模糊干扰\", \"企业知识库兼容\", \"亚秒级响应\", \"拍照即所得\"], \"relations\": [(\"树莓派\", \"应用于\", \"工业视觉诊断\"), (\"DeepSeek\", \"应用于\", \"工业视觉诊断\"), (\"智能知识推送系统\", \"包含\", \"摄像头节点\"), (\"智能知识推送系统\", \"包含\", \"DeepSeek节点\"), (\"智能知识推送系统\", \"包含\", \"知识库节点\"), (\"大语言模型\", \"包含\", \"GPT系统\"), (\"大语言模型\", \"包含\", \"DeepSeek\"), (\"大语言模型\", \"包含\", \"文心大模型\"), (\"大语言模型\", \"包含\", \"LLaMA\"), (\"大语言模型\", \"包含\", \"BERT\"), (\"树莓派\", \"搭配\", \"DeepSeek\"), (\"DeepSeek\", \"具备\", \"多模态解析\"), (\"DeepSeek\", \"具备\", \"抗模糊干扰\"), (\"DeepSeek\", \"具备\", \"企业知识库兼容\"), (\"DeepSeek\", \"具备\", \"亚秒级响应\"), (\"树莓派\", \"支持\", \"边缘计算\"), (\"设备故障\", \"需要\", \"维修手册\"), (\"国产大语言模型\", \"守护\", \"工业数据主权\"), (\"图像编码器\", \"用于\", \"将照片变成数字密码\"), (\"智能知识推送系统\", \"目标为\", \"拍照即所得\")]}","reasoning_content":"\n我现在需要从用户提供的文本中提取实体和它们之间的关系，并以指定的JSON格式输出。首先，我需要仔细阅读文本，找出所有的实体，然后确定实体之间的关系类型。\n\n首先，实体通常是专有名词、特定的技术名称、组织、产品等。让我们通读文本，标记可能的实体：\n\n1. 树莓派：这是一个硬件设备，明显是实体。\n2. DeepSeek：大语言模型名称，实体。\n3. 工业视觉诊断：文本标题提到，可能是实体。\n4. 工业智能维护助手：任务名称，实体。\n5. 维修手册：提到多次，实体。\n6. 大语言模型：教师解释的概念，实体。\n7. GPT系统：AI助教提到的模型，实体。\n8. 文心大模型：AI助教提到的模型，实体。\n9. LLaMA：AI助教提到的模型，实体。\n10. BERT：AI助教提到的模型，实体。\n11. 智能知识推送系统：教师提到的目标系统，实体。\n12. 摄像头节点：系统搭建步骤中的部分，实体。\n13. DeepSeek节点：系统搭建步骤中的部分，实体。\n14. 知识库节点：系统搭建步骤中的部分，实体。\n15. 图像编码器：教师解释原理时提到的组件，实体。\n16. 工业设备：情境导入中提到，实体。\n17. 边缘计算：AI助教提到GPT违背的初衷，实体。\n18. 工业数据主权：教师提到选择国产模型的原因，实体。\n19. 设备故障：情境导入中提到，实体。\n20. 汽车产线：教师举例，实体。\n21. 半导体工厂：教师举例，实体。\n22. 钢厂：AI助教弹出事故简报中的，实体。\n23. 减速机：钢厂事故中的设备，实体。\n24. 第3组：学生小组，实体。\n25. 第4组：学生小组，实体。\n26. AI助教：文本中的角色，实体。\n27. 教师：文本中的角色，实体。\n28. 学生：文本中的角色，实体。\n\n不过，可能需要筛选一下，有些可能不是核心实体，比如“教师”“学生”“AI助教”这些角色可能不算，主要关注技术相关、产品、系统等。另外，“工业视觉诊断”在标题中，可能作为一个整体实体。\n\n接下来，关系类型需要从文本中找出实体之间的动作、所属、功能等关系。例如：\n\n- 树莓派和DeepSeek的关系：文本中提到“树莓派+DeepSeek打造随身维修智库”“为树莓派选择一个‘最强大脑’——大语言模型”“DeepSeek经量化压缩后，可在树莓派实现本地推理”，所以关系可能是“搭配使用”或“集成”。\n- 智能知识推送系统的构成：“系统逻辑分三步：一拍、二查、三推送”“具体分为三步：部署摄像头节点、DeepSeek节点和知识库节点”，所以智能知识推送系统包含摄像头节点、DeepSeek节点、知识库节点，关系是“包含”。\n- 大语言模型与具体模型的关系：“用来进行图像识别的主流大语言模型有GPT系统、DeepSeek、文心大模型、LLaMA和BERT这5种”，所以大语言模型包含GPT系统、DeepSeek、文心大模型、LLaMA、BERT，关系是“包含”。\n- DeepSeek的特性：“DeepSeek的多模态解析、抗模糊干扰、企业知识库兼容、亚秒级响应”，可能关系是“具有特性”，但用户示例中的关系类型可能更具体，比如“具备”。\n- 树莓派与边缘计算：“GPT需云端支持，违背边缘计算初衷”，说明树莓派的应用符合边缘计算，关系可能是“支持”或“符合”。\n- 智能知识推送系统的目标：“打造工业场景下‘拍照即所得’的智能知识推送系统”，关系可能是“目标为”。\n- 设备故障与维修手册：“设备突发故障时，维修工程师花了23分钟翻找维护手册”，关系是“需要”或“关联”。\n- 工业数据主权与国产大语言模型：“选择国产大语言模型，不仅是技术决策，更是对工业数据主权的守护”，关系是“守护”。\n- 图像编码器的作用：“AI用‘图像编码器’把照片变成数字密码”，关系是“用于”。\n\n现在需要整理实体，去掉可能不太相关的，比如学生小组、角色等，聚焦技术实体。核心实体可能包括：树莓派、DeepSeek、大语言模型、GPT系统、文心大模型、LLaMA、BERT、智能知识推送系统、摄像头节点、DeepSeek节点、知识库节点、图像编码器、边缘计算、工业数据主权、维修手册、工业设备、设备故障。\n\n然后关系：\n\n1. （智能知识推送系统，包含，摄像头节点）\n2. （智能知识推送系统，包含，DeepSeek节点）\n3. （智能知识推送系统，包含，知识库节点）\n4. （大语言模型，包含，GPT系统）\n5. （大语言模型，包含，DeepSeek）\n6. （大语言模型，包含，文心大模型）\n7. （大语言模型，包含，LLaMA）\n8. （大语言模型，包含，BERT）\n9. （树莓派，搭配，DeepSeek） （因为文本多次提到“树莓派+DeepSeek”）\n10. （DeepSeek，具备，多模态解析）\n11. （DeepSeek，具备，抗模糊干扰）\n12. （DeepSeek，具备，企业知识库兼容）\n13. （DeepSeek，具备，亚秒级响应）\n14. （树莓派，支持，边缘计算） （因为GPT违背边缘计算初衷，而DeepSeek可在树莓派本地推理，说明树莓派支持边缘计算）\n15. （智能知识推送系统，目标为，拍照即所得）\n16. （设备故障，需要，维修手册）\n17. （国产大语言模型，守护，工业数据主权） （文本中“选择国产大语言模型...更是对工业数据主权的守护”）\n18. （图像编码器，用于，将照片变成数字密码）\n\n不过需要注意用户示例中的关系类型是比较简洁的，比如（实体1，关系类型，实体2），关系类型是动词短语。可能需要调整，比如“包含”“搭配”“具备”“支持”“目标为”“需要”“守护”“用于”等。\n\n现在检查实体是否有重复或需要合并，比如“DeepSeek节点”是智能知识推送系统的一部分，属于系统组件。“大语言模型”是上位概念，包含具体的模型。\n\n最终实体列表可能包括：树莓派、DeepSeek、大语言模型、GPT系统、文心大模型、LLaMA、BERT、智能知识推送系统、摄像头节点、DeepSeek节点、知识库节点、图像编码器、边缘计算、工业数据主权、维修手册、设备故障、多模态解析、抗模糊干扰、企业知识库兼容、亚秒级响应、拍照即所得、国产大语言模型。\n\n不过“多模态解析”等是特性，可能作为关系的宾语，而不是实体。例如（DeepSeek，具备，多模态解析），这里“多模态解析”是实体吗？可能用户期望的实体是名词性的，特性可能算实体。或者可能更关注主要实体，特性作为关系内容。\n\n现在根据文本，逐步提取：\n\n实体：树莓派、DeepSeek、大语言模型、GPT系统、文心大模型、LLaMA、BERT、智能知识推送系统、摄像头节点、DeepSeek节点、知识库节点、图像编码器、边缘计算、工业数据主权、维修手册、设备故障、国产大语言模型。\n\n关系：\n\n- 智能知识推送系统 包含 摄像头节点（“部署摄像头节点、DeepSeek节点和知识库节点”）\n- 智能知识推送系统 包含 DeepSeek节点\n- 智能知识推送系统 包含 知识库节点\n- 大语言模型 包含 GPT系统（“主流大语言模型有GPT系统、DeepSeek、文心大模型、LLaMA和BERT”）\n- 大语言模型 包含 DeepSeek\n- 大语言模型 包含 文心大模型\n- 大语言模型 包含 LLaMA\n- 大语言模型 包含 BERT\n- 树莓派 搭配 DeepSeek（“树莓派+DeepSeek：工业视觉诊断实战”“树莓派+DeepSeek打造随身维修智库”）\n- DeepSeek 具备 多模态解析（“DeepSeek的多模态解析、抗模糊干扰、企业知识库兼容、亚秒级响应”）\n- DeepSeek 具备 抗模糊干扰\n- DeepSeek 具备 企业知识库兼容\n- DeepSeek 具备 亚秒级响应\n- 树莓派 支持 边缘计算（“GPT需云端支持，违背边缘计算初衷”，反推树莓派支持边缘计算）\n- 设备故障 需要 维修手册（“设备突发故障时，维修工程师花了23分钟翻找维护手册”）\n- 国产大语言模型 守护 工业数据主权（“选择国产大语言模型...更是对工业数据主权的守护”）\n- 图像编码器 用于 将照片变成数字密码（“AI用‘图像编码器’把照片变成数字密码”）\n- 智能知识推送系统 目标为 拍照即所得（“打造工业场景下‘拍照即所得’的智能知识推送系统”）\n\n现在需要确认这些关系是否准确，实体是否都在文本中出现。例如“国产大语言模型”在文本中提到“选择国产大语言模型”，所以是实体。“拍照即所得”是目标，作为实体。\n\n现在整理成JSON格式，entities是所有实体的列表，relations是关系元组的列表。\n\n需要注意实体列表不能有重复，所以需要去重。例如“DeepSeek”只出现一次。\n\n最终实体列表：\n\n[\"树莓派\", \"DeepSeek\", \"大语言模型\", \"GPT系统\", \"文心大模型\", \"LLaMA\", \"BERT\", \"智能知识推送系统\", \"摄像头节点\", \"DeepSeek节点\", \"知识库节点\", \"图像编码器\", \"边缘计算\", \"工业数据主权\", \"维修手册\", \"设备故障\", \"国产大语言模型\", \"多模态解析\", \"抗模糊干扰\", \"企业知识库兼容\", \"亚秒级响应\", \"拍照即所得\"]\n\n关系列表：\n\n[\n    (\"智能知识推送系统\", \"包含\", \"摄像头节点\"),\n    (\"智能知识推送系统\", \"包含\", \"DeepSeek节点\"),\n    (\"智能知识推送系统\", \"包含\", \"知识库节点\"),\n    (\"大语言模型\", \"包含\", \"GPT系统\"),\n    (\"大语言模型\", \"包含\", \"DeepSeek\"),\n    (\"大语言模型\", \"包含\", \"文心大模型\"),\n    (\"大语言模型\", \"包含\", \"LLaMA\"),\n    (\"大语言模型\", \"包含\", \"BERT\"),\n    (\"树莓派\", \"搭配\", \"DeepSeek\"),\n    (\"DeepSeek\", \"具备\", \"多模态解析\"),\n    (\"DeepSeek\", \"具备\", \"抗模糊干扰\"),\n    (\"DeepSeek\", \"具备\", \"企业知识库兼容\"),\n    (\"DeepSeek\", \"具备\", \"亚秒级响应\"),\n    (\"树莓派\", \"支持\", \"边缘计算\"),\n    (\"设备故障\", \"需要\", \"维修手册\"),\n    (\"国产大语言模型\", \"守护\", \"工业数据主权\"),\n    (\"图像编码器\", \"用于\", \"将照片变成数字密码\"),\n    (\"智能知识推送系统\", \"目标为\", \"拍照即所得\")\n]\n\n检查是否有遗漏或错误。例如“工业视觉诊断”在标题中，是否算实体？“树莓派+ DeepSeek：工业视觉诊断实战”，“工业视觉诊断”可能是一个实体，关系是“应用于”，比如（树莓派, 应用于, 工业视觉诊断），（DeepSeek, 应用于, 工业视觉诊断）。文本开头标题是“树莓派+ DeepSeek：工业视觉诊断实战”，说明两者用于工业视觉诊断，所以可以添加实体“工业视觉诊断”，关系（树莓派, 应用于, 工业视觉诊断），（DeepSeek, 应用于, 工业视觉诊断）。\n\n另外，“工业智能维护助手”是任务三的名称，文本中“今天进入任务三，工业智能维护助手”，可能算实体，关系可能是（智能知识推送系统, 用于, 工业智能维护助手）？因为目标是打造智能知识推送系统来解决工业智能维护助手的问题。\n\n不过可能用户希望提取最核心的，避免过多。但“工业视觉诊断”在标题，应该加入。\n\n所以补充实体“工业视觉诊断”，关系：\n\n（树莓派, 应用于, 工业视觉诊断）,\n（DeepSeek, 应用于, 工业视觉诊断）\n\n现在实体列表增加“工业视觉诊断”。\n\n最终确认后，生成JSON。","role":"assistant"}}],"created":1751949949,"id":"02175194988142354505080e052b76902d4144bb3aa5d2157ae46","model":"doubao-seed-1-6-250615","service_tier":"default","object":"chat.completion","usage":{"completion_tokens":3343,"prompt_tokens":1481,"total_tokens":4824,"prompt_tokens_details":{"cached_tokens":0},"completion_tokens_details":{"reasoning_tokens":2968}}}
2025-07-08 12:45:49,820 - __main__ - INFO - 成功提取实体和关系，实体数量: 23, 关系数量: 20
2025-07-08 12:46:39,733 - __main__ - INFO - 开始清空 Neo4j 数据库
2025-07-08 12:46:39,734 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,734 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> pinning database: None
2025-07-08 12:46:39,734 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,734 - neo4j.pool - DEBUG - [#0000]  _: <POOL> trying to hand out new connection
2025-07-08 12:46:39,734 - neo4j.io - DEBUG - [#0000]  _: <RESOLVE> in: localhost:7687
2025-07-08 12:46:39,735 - neo4j.io - DEBUG - [#0000]  _: <RESOLVE> dns resolver out: 127.0.0.1:7687
2025-07-08 12:46:39,735 - neo4j.io - DEBUG - [#0000]  C: <OPEN> 127.0.0.1:7687
2025-07-08 12:46:39,735 - neo4j.io - DEBUG - [#92B2]  C: <MAGIC> 0x6060B017
2025-07-08 12:46:39,735 - neo4j.io - DEBUG - [#92B2]  C: <HANDSHAKE> 0x000001FF 0x00080805 0x00020404 0x00000003
2025-07-08 12:46:39,738 - neo4j.io - DEBUG - [#92B2]  S: <HANDSHAKE> 0x000001FF [3] 0x00040404 0x00040405 0x00020805 0x00
2025-07-08 12:46:39,738 - neo4j.io - DEBUG - [#92B2]  C: <HANDSHAKE> 0x00000805 0x00
2025-07-08 12:46:39,738 - neo4j.io - DEBUG - [#92B2]  C: HELLO {'user_agent': 'neo4j-python/5.28.1 Python/3.12.11-final-0 (linux)', 'bolt_agent': {'product': 'neo4j-python/5.28.1', 'platform': 'Linux 6.11.0-29-generic; x86_64', 'language': 'Python/3.12.11-final-0', 'language_details': 'CPython; 3.12.11-final-0 (main, Jun  5 2025 13:09:17) [GCC 11.2.0]'}}
2025-07-08 12:46:39,739 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> client state: CONNECTED > AUTHENTICATION
2025-07-08 12:46:39,739 - neo4j.io - DEBUG - [#92B2]  C: LOGON {'scheme': 'basic', 'principal': 'neo4j', 'credentials': '*******'}
2025-07-08 12:46:39,739 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> client state: AUTHENTICATION > READY
2025-07-08 12:46:39,741 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'server': 'Neo4j/5.26.8', 'protocol_version': '5.8', 'connection_id': 'bolt-19', 'hints': {'connection.recv_timeout_seconds': 120, 'ssr.enabled': True}}
2025-07-08 12:46:39,741 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: CONNECTED > AUTHENTICATION
2025-07-08 12:46:39,743 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'advertised_address': 'localhost:7687'}
2025-07-08 12:46:39,743 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: AUTHENTICATION > READY
2025-07-08 12:46:39,744 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (n) DETACH DELETE n' {} {}
2025-07-08 12:46:39,744 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> client state: READY > STREAMING
2025-07-08 12:46:39,744 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,827 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 82, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,827 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:39,885 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBMpA=', 'stats': {'contains-updates': True, 'nodes-deleted': 101, 'relationships-deleted': 140}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:39,885 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:39,885 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:39,886 - __main__ - INFO - 完成清空 Neo4j 数据库
2025-07-08 12:46:39,886 - __main__ - INFO - 开始将实体和关系写入 Neo4j 数据库
2025-07-08 12:46:39,886 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,886 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> pinning database: None
2025-07-08 12:46:39,886 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,886 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:39,886 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:39,886 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:39,887 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '树莓派'} {}
2025-07-08 12:46:39,887 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,916 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 27, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,916 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:39,918 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBM5A=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:39,918 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:39,919 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:39,919 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,919 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,919 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:39,919 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:39,919 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:39,919 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': 'DeepSeek'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBM5A=']}
2025-07-08 12:46:39,920 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,922 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,922 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:39,924 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBNJA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:39,925 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:39,925 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:39,925 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,925 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,925 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:39,925 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:39,925 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:39,925 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '工业视觉诊断'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBNJA=']}
2025-07-08 12:46:39,926 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,928 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,929 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:39,931 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBNZA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:39,931 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:39,931 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:39,931 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,931 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,931 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:39,931 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:39,932 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:39,932 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '大语言模型'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBNZA=']}
2025-07-08 12:46:39,932 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,934 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 1, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,935 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:39,937 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBNpA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:39,937 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:39,937 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:39,937 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,937 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,938 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:39,938 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:39,938 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:39,938 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': 'GPT系统'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBNpA=']}
2025-07-08 12:46:39,938 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,940 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 1, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,941 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:39,943 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBN5A=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:39,943 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:39,943 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:39,943 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,943 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,943 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:39,944 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:39,944 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:39,944 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '文心大模型'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBN5A=']}
2025-07-08 12:46:39,944 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,946 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 1, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,947 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:39,949 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBOJA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:39,949 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:39,949 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:39,949 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,950 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,950 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:39,950 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:39,950 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:39,950 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': 'LLaMA'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBOJA=']}
2025-07-08 12:46:39,950 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,954 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 1, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,954 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:39,957 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBOZA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:39,957 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:39,957 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:39,958 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,958 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,958 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:39,958 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:39,958 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:39,958 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': 'BERT'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBOZA=']}
2025-07-08 12:46:39,958 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,962 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,962 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:39,964 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBOpA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:39,964 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:39,965 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:39,965 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,965 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,965 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:39,965 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:39,965 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:39,965 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '智能知识推送系统'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBOpA=']}
2025-07-08 12:46:39,965 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,968 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 1, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,968 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:39,971 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBO5A=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:39,971 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:39,971 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:39,971 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,971 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,971 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:39,971 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:39,971 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:39,971 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '摄像头节点'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBO5A=']}
2025-07-08 12:46:39,971 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,974 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 1, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,974 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:39,976 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBPJA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:39,976 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:39,977 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:39,977 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,977 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,977 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:39,977 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:39,977 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:39,977 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': 'DeepSeek节点'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBPJA=']}
2025-07-08 12:46:39,977 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,981 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,981 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:39,987 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBPZA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:39,987 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:39,987 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:39,987 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,987 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,987 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:39,987 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:39,987 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:39,987 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '知识库节点'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBPZA=']}
2025-07-08 12:46:39,988 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,991 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,991 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:39,994 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBPpA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:39,994 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:39,994 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:39,994 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:39,994 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:39,994 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:39,994 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:39,995 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:39,995 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '图像编码器'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBPpA=']}
2025-07-08 12:46:39,995 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:39,998 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:39,998 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,002 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBP5A=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,002 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,003 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,003 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,003 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,003 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,003 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,003 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,003 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '边缘计算'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBP5A=']}
2025-07-08 12:46:40,004 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,010 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,010 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,012 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBQJA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,012 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,012 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,012 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,012 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,012 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,012 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,013 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,013 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '工业数据主权'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBQJA=']}
2025-07-08 12:46:40,013 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,018 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,019 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,023 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBQZA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,023 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,023 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,023 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,023 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,023 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,023 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,023 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,023 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '维修手册'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBQZA=']}
2025-07-08 12:46:40,024 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,027 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 1, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,028 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,030 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBQpA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,030 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,030 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,030 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,030 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,030 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,030 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,030 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,031 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '设备故障'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBQpA=']}
2025-07-08 12:46:40,031 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,036 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 1, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,036 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,040 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBQ5A=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,040 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,040 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,041 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,041 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,041 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,041 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,041 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,041 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '国产大语言模型'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBQ5A=']}
2025-07-08 12:46:40,043 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,046 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,047 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,055 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBRJA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,055 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,055 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,055 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,055 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,055 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,055 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,055 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,055 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '多模态解析'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBRJA=']}
2025-07-08 12:46:40,055 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,083 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,083 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,088 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBRZA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,088 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,088 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,089 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,089 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,089 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,089 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,089 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,089 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '抗模糊干扰'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBRZA=']}
2025-07-08 12:46:40,089 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,093 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,093 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,097 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBRpA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,098 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,098 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,098 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,098 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,098 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,098 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,098 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,098 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '企业知识库兼容'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBRpA=']}
2025-07-08 12:46:40,098 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,103 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,103 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,107 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBR5A=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,107 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,107 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,108 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,108 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,108 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,108 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,108 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,108 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '亚秒级响应'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBR5A=']}
2025-07-08 12:46:40,108 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,110 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 1, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,110 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,113 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBSJA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,113 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,113 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,113 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,114 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,114 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,114 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,114 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,114 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MERGE (n:Entity {name: $name})' {'name': '拍照即所得'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBSJA=']}
2025-07-08 12:46:40,114 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,116 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,117 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,117 - __main__ - INFO - 成功创建 23 个实体节点
2025-07-08 12:46:40,118 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBSZA=', 'stats': {'contains-updates': True, 'labels-added': 1, 'nodes-created': 1, 'properties-set': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,119 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,119 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,119 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,119 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,119 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,119 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,119 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,122 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:应用于]->(b)' {'source': '树莓派', 'target': '工业视觉诊断'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBSZA=']}
2025-07-08 12:46:40,122 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,172 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 47, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,172 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,175 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBSpA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,175 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,175 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,175 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:应用于]->(b)'
2025-07-08 12:46:40,175 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,176 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,176 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,176 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,176 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,176 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:应用于]->(b)' {'source': 'DeepSeek', 'target': '工业视觉诊断'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBSpA=']}
2025-07-08 12:46:40,176 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,180 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 1, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,180 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,181 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBS5A=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,182 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,182 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,182 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:应用于]->(b)'
2025-07-08 12:46:40,183 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,183 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,183 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,183 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,183 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,183 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)' {'source': '智能知识推送系统', 'target': '摄像头节点'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBS5A=']}
2025-07-08 12:46:40,183 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,250 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 66, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,251 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,255 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBTJA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,255 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,255 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,255 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)'
2025-07-08 12:46:40,255 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,255 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,255 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,255 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,256 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,256 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)' {'source': '智能知识推送系统', 'target': 'DeepSeek节点'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBTJA=']}
2025-07-08 12:46:40,256 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,259 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,259 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,261 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBTZA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,262 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,262 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,262 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)'
2025-07-08 12:46:40,262 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,262 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,262 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,262 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,262 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,262 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)' {'source': '智能知识推送系统', 'target': '知识库节点'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBTZA=']}
2025-07-08 12:46:40,263 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,265 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,265 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,268 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBTpA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,268 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,268 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,268 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)'
2025-07-08 12:46:40,268 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,268 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,268 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,268 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,268 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,268 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)' {'source': '大语言模型', 'target': 'GPT系统'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBTpA=']}
2025-07-08 12:46:40,269 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,271 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,272 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,274 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBT5A=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,274 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,274 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,274 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)'
2025-07-08 12:46:40,274 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,274 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,274 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,274 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,275 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,275 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)' {'source': '大语言模型', 'target': 'DeepSeek'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBT5A=']}
2025-07-08 12:46:40,275 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,278 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,278 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,280 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBUJA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,280 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,280 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,280 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)'
2025-07-08 12:46:40,281 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,281 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,281 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,281 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,281 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,281 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)' {'source': '大语言模型', 'target': '文心大模型'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBUJA=']}
2025-07-08 12:46:40,281 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,284 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 1, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,284 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,286 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBUZA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,286 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,287 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,287 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)'
2025-07-08 12:46:40,287 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,287 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,287 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,287 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,287 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,287 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)' {'source': '大语言模型', 'target': 'LLaMA'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBUZA=']}
2025-07-08 12:46:40,287 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,290 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,291 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,292 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBUpA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,293 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,293 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,293 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)'
2025-07-08 12:46:40,293 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,293 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,293 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,293 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,293 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,293 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)' {'source': '大语言模型', 'target': 'BERT'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBUpA=']}
2025-07-08 12:46:40,293 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,296 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 1, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,296 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,298 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBU5A=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,298 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,299 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,299 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:包含]->(b)'
2025-07-08 12:46:40,299 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,299 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,299 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,299 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,299 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,300 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:搭配]->(b)' {'source': '树莓派', 'target': 'DeepSeek'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBU5A=']}
2025-07-08 12:46:40,300 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,358 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 58, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,359 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,361 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBVZA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,362 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,362 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,362 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:搭配]->(b)'
2025-07-08 12:46:40,362 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,362 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,362 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,362 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,362 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,362 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:具备]->(b)' {'source': 'DeepSeek', 'target': '多模态解析'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBVZA=']}
2025-07-08 12:46:40,362 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,421 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 58, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,422 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,424 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBV5A=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,424 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,424 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,424 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:具备]->(b)'
2025-07-08 12:46:40,425 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,425 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,425 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,425 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,425 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,425 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:具备]->(b)' {'source': 'DeepSeek', 'target': '抗模糊干扰'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBV5A=']}
2025-07-08 12:46:40,425 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,428 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,429 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,431 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBWJA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,431 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,431 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,431 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:具备]->(b)'
2025-07-08 12:46:40,431 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,432 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,432 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,432 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,432 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,432 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:具备]->(b)' {'source': 'DeepSeek', 'target': '企业知识库兼容'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBWJA=']}
2025-07-08 12:46:40,432 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,435 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 1, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,435 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,437 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBWZA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,438 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,438 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,438 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:具备]->(b)'
2025-07-08 12:46:40,438 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,438 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,438 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,438 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,438 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,438 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:具备]->(b)' {'source': 'DeepSeek', 'target': '亚秒级响应'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBWZA=']}
2025-07-08 12:46:40,438 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,441 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 2, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,441 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,444 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBWpA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,444 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,444 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,444 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:具备]->(b)'
2025-07-08 12:46:40,445 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,445 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,445 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,445 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,445 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,445 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:支持]->(b)' {'source': '树莓派', 'target': '边缘计算'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBWpA=']}
2025-07-08 12:46:40,445 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,504 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 57, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,504 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,506 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBXJA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,506 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,506 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,507 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:支持]->(b)'
2025-07-08 12:46:40,507 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,507 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,507 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,507 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,507 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,507 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:需要]->(b)' {'source': '设备故障', 'target': '维修手册'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBXJA=']}
2025-07-08 12:46:40,508 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,564 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 54, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,564 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,566 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBXpA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,566 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,566 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,567 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:需要]->(b)'
2025-07-08 12:46:40,567 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,567 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,567 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,567 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,567 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,567 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:守护]->(b)' {'source': '国产大语言模型', 'target': '工业数据主权'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBXpA=']}
2025-07-08 12:46:40,567 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,618 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 49, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,618 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,620 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBYJA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,620 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,620 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,621 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:守护]->(b)'
2025-07-08 12:46:40,621 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,621 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,621 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,621 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,621 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,621 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:用于]->(b)' {'source': '图像编码器', 'target': '将照片变成数字密码'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBYJA=']}
2025-07-08 12:46:40,621 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,678 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 55, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,678 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,679 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBYJA=', 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,679 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,679 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,679 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:用于]->(b)'
2025-07-08 12:46:40,679 - neo4j - DEBUG - [#0000]  _: <WORKSPACE> routing towards fixed database: None
2025-07-08 12:46:40,679 - neo4j.pool - DEBUG - [#0000]  _: <POOL> acquire direct connection, access_mode='WRITE', database=AcquisitionDatabase(name=None, guessed=False)
2025-07-08 12:46:40,679 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> picked existing connection bolt-19
2025-07-08 12:46:40,679 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> checked re_auth auth=None updated=False force=False
2025-07-08 12:46:40,679 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> handing out existing connection
2025-07-08 12:46:40,680 - neo4j.io - DEBUG - [#92B2]  C: RUN 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:目标为]->(b)' {'source': '智能知识推送系统', 'target': '拍照即所得'} {'bookmarks': ['FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBYJA=']}
2025-07-08 12:46:40,680 - neo4j.io - DEBUG - [#92B2]  C: PULL {'n': 1000}
2025-07-08 12:46:40,746 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'t_first': 66, 'fields': [], 'db': 'neo4j'}
2025-07-08 12:46:40,746 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: READY > STREAMING
2025-07-08 12:46:40,746 - __main__ - INFO - 成功创建 20 个关系
2025-07-08 12:46:40,748 - neo4j.io - DEBUG - [#92B2]  S: SUCCESS {'bookmark': 'FB:kcwQ7mpRHeFBQYGtfXGbV11eWckBYpA=', 'stats': {'contains-updates': True, 'relationships-created': 1}, 'statuses': [{'gql_status': '00001', 'status_description': 'note: successful completion - omitted result'}, {'gql_status': '03N90', 'neo4j_code': 'Neo.ClientNotification.Statement.CartesianProduct', 'status_description': "info: cartesian product. The disconnected pattern '(a:Entity {name: $source}), (b:Entity {name: $target})' builds a cartesian product. A cartesian product may produce a large amount of data and slow down query processing.", 'diagnostic_record': {'_classification': 'PERFORMANCE', '_severity': 'INFORMATION', '_position': {'offset': 0, 'line': 1, 'column': 1}}, 'description': 'If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))', 'title': 'This query builds a cartesian product between disconnected patterns.'}], 'type': 'w', 't_last': 0, 'db': 'neo4j'}
2025-07-08 12:46:40,748 - neo4j.io - DEBUG - [#92B2]  _: <CONNECTION> server state: STREAMING > READY
2025-07-08 12:46:40,748 - neo4j.pool - DEBUG - [#92B2]  _: <POOL> released bolt-19
2025-07-08 12:46:40,749 - neo4j.notifications - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: 'MATCH (a:Entity {name: $source}), (b:Entity {name: $target}) MERGE (a)-[r:目标为]->(b)'
2025-07-08 12:46:40,749 - __main__ - INFO - 完成将实体和关系写入 Neo4j 数据库
2025-07-08 12:46:40,749 - __main__ - INFO - 完成处理文件: ./AIGC讲稿v3.docx
2025-07-08 12:46:40,749 - __main__ - INFO - 程序结束
2025-07-08 12:46:40,781 - neo4j.pool - DEBUG - [#0000]  _: <POOL> close
2025-07-08 12:46:40,781 - neo4j.io - DEBUG - [#92B2]  C: GOODBYE
2025-07-08 12:46:40,782 - neo4j.io - DEBUG - [#92B2]  C: <CLOSE>
